{"version":3,"sources":["Images/tree.svg","Images/basket.svg","Images/apple.svg","Images/grab.svg","Images/sign.png","Components/Tree.js","Components/Basket.js","Components/Apple.js","Components/Apples.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Tree","react_default","a","createElement","src","tree","className","this","props","treeState","alt","Component","Basket","basket","collected","Apple","apple","concat","eachapple","id","status","Apples","apples","map","Components_Apple","key","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","appleList","Array","from","length","v","i","setState","_","index","sign","onClick","shakeTree","bind","grab","Components_Apples","Components_Tree","Components_Basket","alert","css","selectApples","random","that","setTimeout","Math","floor","splice","indexOf","that.state.appleList","dropApples","number","_this2","prevState","objectSpread","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f0a93aa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tree.ca2d3c81.svg\";","module.exports = __webpack_public_path__ + \"static/media/basket.ff7af82f.svg\";","module.exports = __webpack_public_path__ + \"static/media/apple.5761b02f.svg\";","module.exports = __webpack_public_path__ + \"static/media/grab.5a720d14.svg\";","module.exports = __webpack_public_path__ + \"static/media/sign.7c48f295.png\";","import React, { Component } from 'react';\r\nimport tree from '../Images/tree.svg';\r\nimport '../App.scss';\r\n\r\nclass Tree extends Component {\r\n  render() {\r\n    return (          \r\n          <img src={tree} className={this.props.treeState} alt=\"tree\" />\r\n          // Renders the tree image to the screen. Also control his classname by props. This way animating tree is possible with SASS.\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tree;\r\n","import React, { Component } from 'react';\r\nimport basket from '../Images/basket.svg'; \r\nimport '../App.scss';\r\n\r\nclass Basket extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n          <img src={basket} className=\"basket-image\" alt=\"basket\" /> {/* Basket image on the screen */}\r\n          <div className=\"App-hud\" >Apples Collected: {this.props.collected}</div> {/* Prints the apple collected state value to the screen */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Basket;\r\n","import React, { Component } from 'react';\r\nimport apple from '../Images/apple.svg';\r\nimport '../App.scss';\r\n\r\nclass Apple extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n          <img src={apple} className={ `apple-image${this.props.eachapple.id}${this.props.eachapple.status}` } alt=\"apple\" />\r\n          {/* \r\n            We're recieving both apple ID and status. And setting it as a classname. \r\n            For example for an apple with ID:1 and Status:'falling' classname would be 'apple-image1falling'.\r\n            Later we're accessing this name in the Sass and doing whatever we want.\r\n          */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Apple;\r\n","import React, { Component } from 'react';\r\nimport '../App.scss';\r\nimport Apple from './Apple';\r\n\r\nclass Apples extends Component {\r\n  render() {\r\n    let apple;\r\n    if(this.props.apples){\r\n        // We're mapping the apple props and sending each apple to Apple.js and this way we're rendering each apple individually.\r\n        apple = this.props.apples.map(eachapple => {\r\n            return (\r\n                <Apple key={eachapple.id} eachapple={eachapple}/>\r\n            );\r\n        });\r\n    }\r\n    return (\r\n        <div>\r\n            {apple}\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default Apples;\r\n","import React, { Component } from \"react\";\nimport Tree from \"./Components/Tree\";\nimport Basket from \"./Components/Basket\";\nimport Apples from \"./Components/Apples\";\nimport grab from \"./Images/grab.svg\";\nimport sign from \"./Images/sign.png\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // Defining our states.\n    this.state = {      \n      apples: [], //  For managing apple component. \n      treeState: \"\", // For mananing tree action.\n      collected: 0, // Small HUD display for user.\n      appleList: Array.from({ length: 12 }, (v, i) => i + 1) // For selecting an apple and manipulating it.\n    };\n  }\n\n  componentWillMount() {\n    // Initinating our first state values. Thil will be activated upon components mount.\n    this.setState({      \n      apples: Array.from({ length: 12 }, (_, index) => ({ // Creating our apples. Changing the length will cause affect the apple components that are mounted.\n      id: index + 1, // Each apple has an ID. Starting from 1 and goes to 12.\n      status: \"present\" // Defining that are apples are currently present on the tree.\n      })),\n      treeState: \"stagnant\" // Tree is stable and not shaking.\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <div className=\"App-warning\">\n            This application is experienced best with a screen resolution of 1920x1080.\n          </div>\n          <div className=\"App-info\"> Harvesting with Newton <br/> v1.0 <br/> @ufukozdogan </div>\n          <img src={sign} className=\"sign\" alt=\"sign\" /> {/* Just a cosmetic */}\n          <img onClick={this.shakeTree.bind(this)} className=\"grab\" src={grab} alt=\"grab\" /> {/* The button that starts the adventure*/}\n          <Apples apples={this.state.apples} /> {/* Apples that are going to apple component with apple state */}\n          <Tree treeState={this.state.treeState} /> {/* Tree that is going to tree component with tree's state */}\n          <Basket collected={this.state.collected} /> {/* Basket that is going to basket component with the data of collected apple number */}\n        </div>\n      </div>\n    );\n  }\n\n  // Function below starts the happenings. Basically it changes the tree state to \"shaking\" and runs selectApples().\n  // Additionally it gets the apple count on the tree and if there are none left returns an alert.\n  shakeTree() {\n    if (this.state.appleList.length === 0)\n      return alert(\n        \"There are no apples left. Refresh the page to reset the app!\"\n      );\n    var css = this.state.treeState === \"stagnant\" ? \"shaking\" : \"stagnant\"; // This way we get to shake the tree!\n    this.setState({ treeState: css });\n    this.selectApples();\n  }\n\n  // appleList is a state that we initiated above. This function gets that state array and selects a random index in it. This apple index has an ID and status.\n  // After selection, we send that ID to the dropApples function. Before that we're removing the ID from the array list. We don't want to get the same random value next time, don't we?\n  selectApples() {\n    var appleList = this.state.appleList; // Getting the state value to a variable for easy control.\n    var random; // For later use.\n    var that = this; // Inside of the timeout function, we got to have \"that\" insted of \"this\" keyword. This way we get to use our functions such as dropApples().\n    for (var i = 1; i <= 3; i++) {\n      // For loop runs 3 times. This means we're dropping three apples. But we're putting a small delay amongst them. Function and timeout below does exactly that.\n      (function(ind) {\n        setTimeout(function() {\n          random = appleList[Math.floor(Math.random() * appleList.length)]; // Getting a random ID within the length of the list.\n          appleList.splice(appleList.indexOf(random), 1); // Removing that specific ID from the list.\n          that.setState({ \"that.state.appleList\": that.state.appleList }); // Saving our local changes to the state. \n          that.dropApples(random); // Call the function. This occurs three times due to for loop.\n        }, 1000 + 2000 * ind);\n      })(i);\n    }\n  }\n\n  // And this is the most important function. It actually does the magic user sees. It's rather simple than the other ones.\n  // What it does is, once it has the value, translates the value to a local variable. And then, maps the whole apples array.\n  // If it finds an apple with an ID given, it always does, sets that apple's status to 'falling'. And this way we're animating the apple in the SASS.\n  dropApples(number) {\n    if (this.state.apples) {\n      this.setState(prevState => ({\n        apples: prevState.apples.map(apple => { //Maps the apple and previous state too!\n          if (apple.id === number) return { ...apple, status: \"falling\" }; // Magic\n          return apple;\n        })\n      }));\n    }\n\n    //After that it changes the tree state to 'stagnant' and increases the collected apple by one. Small hud thingy.\n    setTimeout(() => {\n      this.setState({\n        treeState: \"stagnant\",\n        collected: this.state.collected + 1\n      });\n    }, 4000);\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}